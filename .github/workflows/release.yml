name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PROJECT_NAME: "uavpc"
  build_type: Release
  BIN_FILES_PATH: build/bin/Release
  install_location: .local

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: set version name
      id: version
      run: echo ::set-output name=name::${GITHUB_REF#refs/tags/}

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: cache dependencies
      uses: actions/cache@v2
      id: cache
      with:
        path: ${{ github.HOME }}/.local
        key: ${{ runner.os }}-release-dependencies

    - name: install Catch2
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cd ..
        git clone https://github.com/catchorg/catch2.git --branch v2.13.4
        cd catch2
        cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/${{ env.install_location }} \
          -DCATCH_INSTALL_DOCS:BOOL=OFF -DCATCH_INSTALL_EXTRAS:BOOL=OFF -DCATCH_BUILD_TESTING=OFF
        cmake --build build --config Release -j4
        cmake --build build --target install --config Release

    - name: install OpenBLAS
      run: sudo apt install -y libopenblas-dev
    
    - name: install OpenCV
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cd ..
        git clone https://github.com/opencv/opencv.git --branch 4.5.0
        cd opencv
        cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/${{ env.install_location }} \
          -DBUILD_LIST=videoio,video,core,highgui,imgcodecs,calib3d,dnn,objdetect,features2d \
          -DBUILD_PERF_TESTS:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -DBUILD_DOCS:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF \
          -DBUILD_opencv_apps:BOOL=OFF \
          -DBUILD_FAT_JAVA_LIB:BOOL=OFF -DBUILD_JAVA:BOOL=OFF
        cmake --build build --config Release -j4
        cmake --build build --target install --config Release

    - name: install Caffe dependencies
      run: |
        sudo apt install -y protobuf-compiler libprotobuf-dev \
          libhdf5-dev \
          libboost-all-dev \
          libgflags-dev libgoogle-glog-dev

    - name: install Caffe
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cd ..
        git clone https://github.com/CMU-Perceptual-Computing-Lab/caffe.git
        git clone https://aur.archlinux.org/caffe.git caffe-patch
        cd caffe
        cp -v ../caffe-patch/caffe-1.0-opencv4-fix.patch .
        patch -d . -Np1 -i ./caffe-1.0-opencv4-fix.patch || echo "Patch applied"
        cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/${{ env.install_location }} \
            -DBLAS=open \
            -DCPU_ONLY=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_docs=OFF \
            -DBUILD_python=OFF \
            -DBUILD_python_layer=OFF \
            -DUSE_LEVELDB=OFF \
            -DUSE_LMDB=OFF \
            -DUSE_OPENCV=ON
        cmake --build build --config Release -j4
        cmake --build build --target install --config Release

    - name: link Caffe lib to /usr/lib (OpenPose bug)
      run: sudo ln -s ${{ github.workspace }}/${{ env.install_location }}/lib/libcaffe.so /usr/lib/libcaffe.so

    - name: install OpenPose
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cd ..
        git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose.git --branch v1.7.0
        cd openpose
        cp -v ../uavpc/vendor/openpose-opencv4.patch .
        patch -d . -Np1 -i ./openpose-opencv4.patch
        cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/${{ env.install_location }} \
          -DCMAKE_BUILD_TYPE:STRING="Release" \
          -DBUILD_CAFFE:BOOL=OFF \
          -DCaffe_INCLUDE_DIRS:PATH=${{ github.workspace }}/${{ env.install_location }}/include \
          -DCaffe_LIBS:PATH=${{ github.workspace }}/${{ env.install_location }}/lib/libcaffe.so \
          -DGPU_MODE:STRING=CPU_ONLY \
          -DDOWNLOAD_BODY_25_MODEL:BOOL=OFF \
          -DDOWNLOAD_BODY_MPI_MODEL:BOOL=ON \
          -DDOWNLOAD_FACE_MODEL:BOOL=OFF \
          -DDOWNLOAD_HAND_MODEL:BOOL=OFF \
          -DBUILD_EXAMPLES:BOOL=OFF \
          -DBUILD_PYTHON:BOOL=OFF \
          -DBUILD_SHARED_LIBS:BOOL=OFF
        cmake --build build --config Release -j4
        cmake --build build --target install --config Release

    - name: install I2C Linux kernel headers
      run: sudo apt install -y libi2c-dev

    - name: configure
      run: |
        cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/${{ env.install_location }} \
          -DCMAKE_BUILD_TYPE:STRING=${{ env.build_type }} \
          -Duavpc_ENABLE_CODE_COVERAGE=1 \
          -Duavpc_ENABLE_DOXYGEN=0
      
    - name: build
      run: cmake --build build --config ${{ env.build_type }} -j4

    - name: run tests
      run: |
        cd build
        ctest -C $BUILD_TYPE -VV --output-on-failure -j 8

    - name: install project
      run: cmake --build build --target install --config ${{ env.build_type }} 

    - name: generate archive
      run: |
        cd $BIN_FILES_PATH
        tar -cvzf $HOME/artifact.tar.gz .

    - name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-${{ steps.version.outputs.name }}
        path: '~/artifact.*'

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: set version name
      id: version
      run: echo ::set-output name=name::${GITHUB_REF#refs/tags/}

    - name: create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.name }}
        # if needed, you can set the release body here
        #body: "Release notes"
        draft: false
        prerelease: false

    - name: download artifact
      uses: actions/download-artifact@v2
      with:
        name: "Linux-${{ steps.version.outputs.name }}"
        path: ./

    - name: upload ubuntu release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "artifact.tar.gz"
        asset_name: "${{ env.PROJECT_NAME }}-Linux-${{ steps.version.outputs.name }}.tar.gz"
        asset_content_type: application/x-tar

