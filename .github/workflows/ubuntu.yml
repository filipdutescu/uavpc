name: Ubuntu

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  build_type: Release
  install_location: .local

jobs:
  build:

    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"

    steps:
    - uses: actions/checkout@v2
      
    - name: cache dependencies
      uses: actions/cache@v2
      id: cache
      with:
        path: ${{ github.workspace }}/${{ env.install_location }}
        key: ${{ runner.os }}-dependencies-v1

    - name: install Catch2
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cd ..
        git clone https://github.com/catchorg/catch2.git --branch v2.13.4
        cd catch2
        cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/${{ env.install_location }} \
          -DCATCH_INSTALL_DOCS:BOOL=OFF -DCATCH_INSTALL_EXTRAS:BOOL=OFF -DCATCH_BUILD_TESTING=OFF
        cmake --build build --config Release -j4
        cmake --build build --target install --config Release

    - name: install OpenCV
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cd ..
        git clone https://github.com/opencv/opencv.git --branch 4.5.0
        cd opencv
        cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/${{ env.install_location }} \
          -DBUILD_LIST=videoio,highgui\
          -DBUILD_PERF_TESTS:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -DBUILD_DOCS:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF\
          -DBUILD_opencv_apps:BOOL=OFF\
          -DBUILD_FAT_JAVA_LIB:BOOL=OFF -DBUILD_JAVA:BOOL=OFF
        cmake --build build --config Release -j4
        cmake --build build --target install --config Release

    - name: install OpenPose
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cd ..
        git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose.git --branch v1.7.0
        cd opencv
        cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/${{ env.install_location }} \
          -DDOWNLOAD_FACE_MODEL:BOOL=OFF\
          -DDOWNLOAD_HAND_MODEL:BOOL=OFF\
          -DBUILD_EXAMPLES:BOOL=OFF\
          -DBUILD_PYTHON:BOOL=OFF\
          -DBUILD_SHARED_LIBS:BOOL=OFF
        cmake --build build --config Release -j4
        cmake --build build --target install --config Release

    - name: install I2C Linux kernel headers
      run: sudo apt install -y libi2c-dev

    - name: configure
      run: cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/${{ env.install_location }} -Duavpc_ENABLE_CODE_COVERAGE=1 -Duavpc_ENABLE_DOXYGEN=0
      
    - name: build
      run: cmake --build build --config ${{ env.build_type }} -j4

    - name: run tests
      run: |
        cd build
        ctest -C $BUILD_TYPE -VV

    - name: Code coverage using Codecov 
      run: bash <(curl -s https://codecov.io/bash) 

    - name: install project
      run: cmake --build build --target install --config ${{ env.build_type }} 

